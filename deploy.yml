# Ansible playbook for deploying a wordcount app
# With thanks to https://github.com/brennv/flask-ansible-example as a starting point

---
# Install needed packages and create app directory
- hosts: webservers
  become: yes
  become_method: sudo
  tasks:
  # Make sure we require a key for root logins -- alternatively we could disable altogether
  - name: Require key for root login via ssh
    lineinfile: dest=/etc/ssh/sshd_config regexp="^PermitRootLogin" line="PermitRootLogin without-password" state=present
    notify:
      - restart ssh
  - name: update cache
    apt: name=python-software-properties state=present update_cache=yes cache_valid_time=43200
  - name: install packages
    apt: name={{item}} state=present
    with_items:
      - python-pip 
      - python-dev  
      - python3-pip
      - python3-dev
      - python3.4-venv
      - nginx
      - git
  - name: create app directory
    file: path="/opt/{{ app_name }}" state=directory owner={{ app_user }} group={{ app_user }}

# Install the app, become app_user so we don't have to fix permissions
- hosts: webservers
  become_user: "{{ app_user }}"
  become_method: sudo
  tasks:
  - name: clone repo
    git:
      repo: 'https://github.com/{{ github_user }}/{{ app_name }}.git'
      dest: /opt/{{ app_name }}
      update: yes  # Does a git pull if the repo already exists
      force: yes
  - name: install modules in a virtualenv
    pip:
      requirements: /opt/{{ app_name }}/requirements.txt
      virtualenv: /opt/{{ app_name }}/env
      virtualenv_command: /usr/bin/python3 -m venv
  - name: install gunicorn too
    pip:
      name: gunicorn
      virtualenv: /opt/{{ app_name }}/env


- hosts: webservers
  become: yes
  become_method: sudo
  tasks:
# Configure app upstart service
  - name: copy wsgi.py
    copy:
      src: wsgi.py
      dest: /opt/{{ app_name }}/wsgi.py
  - name: template upstart service config
    template:
      src: upstart.conf
      dest: /etc/init/{{ app_name }}.conf

  - name: start upstart app service
    service: 
      name: "{{ app_name }}" 
      state: restarted 
      enabled: yes

# Configure nginx
  - name: template nginx site config
    template:
      src: nginx.conf
      dest: /etc/nginx/sites-available/{{ app_name }}

  - name: remove default nginx site config
    file: path=/etc/nginx/sites-enabled/default state=absent

  - name: enable nginx site
    file:
      src: /etc/nginx/sites-available/{{ app_name }}
      dest: /etc/nginx/sites-enabled/default
      state: link
      force: yes

  - name: create /etc/nginx/ssl
    file: 
      path: "/etc/nginx/ssl/" 
      state: directory

  - name: copy server certificate
    copy:
      src: ./secrets/server.crt
      dest: /etc/nginx/ssl/server.crt
      mode: 0600
      force: yes

  - name: copy server key
    copy:
      src: ./secrets/server.key
      dest: /etc/nginx/ssl/server.key
      mode: 0600
      force: yes

  - name: copy nginx htpasswd
    copy:
      src: ./secrets/htpasswd
      dest: /etc/nginx/.htpasswd
      mode: 0600
      owner: www-data
      group: www-data
      force: yes

  - name: restart nginx
    service: 
      name: nginx 
      state: restarted
      enabled: yes

# Set up firewall rules
  - name: Install ufw
    apt: package=ufw state=present

  - name: Configure ufw defaults
    ufw: direction={{ item.direction }} policy={{ item.policy }}
    with_items:
      - { direction: 'incoming', policy: 'deny' }
      - { direction: 'outgoing', policy: 'allow' }
    notify:
      - restart ufw

  - name: Configure ufw rules
    ufw: rule={{ item.rule }} port={{ item.port }} proto={{ item.proto }}
    with_items:
      - { rule: 'limit', port: '22', proto: 'tcp' }
      - { rule: 'allow', port: '443', proto: 'tcp' }
    notify:
      - restart ufw

  - name: Enable ufw logging
    ufw: logging=on
    notify:
      - restart ufw

  - name: Enable ufw
    ufw: state=enabled

  handlers:
  - include: handlers.yml